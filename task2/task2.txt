
Задание 2.1.

Разработать программу, которая читает информацию о поддереве файловой системы,
записывает ее в JSON-документ и выводит его в терминал. Путь к поддереву
сообщается программе через аргумент командной строки.

Для каждого узла поддерева ФС (файла, каталога и т.д.) читается следующая
информация.
1. Имя. В JSON-документе хранится по ключу name.
2. Тип. В JSON-документе хранится по ключу type. Возможные значения - normal,
dir, char, block.
3. Размер в байтах (действителен только для обычных файлов). В JSON-документе
хранится по ключу size.
4. Список дочерних узлов (действителен только для каталогов). В JSON-документе
хранится по ключу children.

Пример вывода:
{
	"children": [
		{
			"type": "dir",
			"name": "",
			"children": [
				{
					"type": "normal",
					"name": ".gitignore",
					"size": 58
				},
				{
					"type": "normal",
					"name": "config",
					"size": 243 
				},
				{
					"type": "dir",
					"name": "info",
					"children": [
						{
							"type": "char",
							"name": "dev1"
						}
					]
				}
			]
		}
	]
}

Задание 2.2.

Разработать программу, которая читает из устройства ввода, записывает их в
JSON-документ и выводит его в терминал. Путь к устройству ввода сообщается
программе через аргумент командной строки. Программа запоминает только события
типов EV_KEY и EV_REL, остальные типы игнорируются. Для событий EV_KEY
программа сохраняет код клавиши и состояние клавиши (нажата или отжата). Для
EV_REL программа сохраняет только значение.


Пример вывода для клавиатуры:
[
	{
		"type": "EV_KEY",
		"code": "KEY_ENTER",
		"state": 0
	},
	{
		"type": "EV_KEY",
		"code": "KEY_S",
		"state": 1
	}
]

Пример вывода для мыши:
[
	{
		"Type": "EV_REL",
		"value": -6
	},
	{
		"Type": "EV_REL",
		"value": 7
	},
	{
		"Type": "EV_REL",
		"value": -12
	}
]
